{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Billy\\\\Desktop\\\\Quiz2024\\\\femmesdhistoire2024\\\\src\\\\components\\\\QuizContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport QuestionCard from './QuestionCard';\nimport CustomProgressBar from './CustomProgressBar';\nimport ScoreDisplay from './ScoreDisplay';\nimport questionsData from './json/quiz.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizContainer = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [quizFinished, setQuizFinished] = useState(false);\n  useEffect(() => {\n    // Mélangez aléatoirement les questions et prenez les 20 premières\n    const shuffledQuestions = questionsData.sort(() => 0.5 - Math.random()).slice(0, 20);\n    setQuestions(shuffledQuestions);\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setStartTime(Date.now());\n  }, []);\n  const handleAnswer = answer => {\n    if (questions[currentQuestionIndex].correct === answer) {\n      // Mets à jour le score si la réponse est correcte\n      setScore(score + 1);\n    }\n\n    // Passez à la question suivante\n    const nextQuestionIndex = currentQuestionIndex + 1;\n    if (nextQuestionIndex < questions.length) {\n      setCurrentQuestionIndex(nextQuestionIndex);\n    } else {\n      setQuizFinished(true); // Marquer le quiz comme terminé\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !quizFinished ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CustomProgressBar, {\n        className: \"progressBar\",\n        current: currentQuestionIndex + 1,\n        total: questions.length,\n        niveau: questions[currentQuestionIndex] ? questions[currentQuestionIndex].niveau : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(QuestionCard, {\n        question: questions[currentQuestionIndex],\n        onAnswerSelected: handleAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n      score: score,\n      totalQuestions: questions.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizContainer, \"KsaxeEMkbh21XkMZnX44gP8GIWQ=\");\n_c = QuizContainer;\nexport default QuizContainer;\nvar _c;\n$RefreshReg$(_c, \"QuizContainer\");","map":{"version":3,"names":["React","useState","useEffect","QuestionCard","CustomProgressBar","ScoreDisplay","questionsData","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizContainer","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","startTime","setStartTime","quizFinished","setQuizFinished","shuffledQuestions","sort","Math","random","slice","Date","now","handleAnswer","answer","correct","nextQuestionIndex","length","children","className","current","total","niveau","fileName","_jsxFileName","lineNumber","columnNumber","question","onAnswerSelected","totalQuestions","_c","$RefreshReg$"],"sources":["C:/Users/Billy/Desktop/Quiz2024/femmesdhistoire2024/src/components/QuizContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport QuestionCard from './QuestionCard';\r\nimport CustomProgressBar from './CustomProgressBar';\r\nimport ScoreDisplay from './ScoreDisplay';\r\nimport questionsData from './json/quiz.json';\r\n\r\nconst QuizContainer = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [startTime, setStartTime] = useState(null);\r\n    const [quizFinished, setQuizFinished] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        // Mélangez aléatoirement les questions et prenez les 20 premières\r\n        const shuffledQuestions = questionsData.sort(() => 0.5 - Math.random()).slice(0, 20);\r\n        setQuestions(shuffledQuestions);\r\n        setCurrentQuestionIndex(0);\r\n        setScore(0);\r\n        setStartTime(Date.now());\r\n    }, []);\r\n    \r\n\r\n    const handleAnswer = (answer) => {\r\n        if (questions[currentQuestionIndex].correct === answer) {\r\n            // Mets à jour le score si la réponse est correcte\r\n            setScore(score + 1);\r\n        }\r\n    \r\n        // Passez à la question suivante\r\n        const nextQuestionIndex = currentQuestionIndex + 1;\r\n        if (nextQuestionIndex < questions.length) {\r\n            setCurrentQuestionIndex(nextQuestionIndex);\r\n        } else {\r\n            setQuizFinished(true); // Marquer le quiz comme terminé\r\n        }\r\n    };\r\n\r\n    \r\n    return (\r\n        <div>\r\n        {!quizFinished ? (\r\n            <>\r\n                <CustomProgressBar \r\n                    className='progressBar'\r\n                    current={currentQuestionIndex + 1} \r\n                    total={questions.length} \r\n                    niveau={questions[currentQuestionIndex] ? questions[currentQuestionIndex].niveau : \"\"}\r\n                />\r\n\r\n                <QuestionCard\r\n                    question={questions[currentQuestionIndex]}\r\n                    onAnswerSelected={handleAnswer}\r\n                />\r\n            </>\r\n        ) : (\r\n            <ScoreDisplay score={score} totalQuestions={questions.length} />\r\n        )}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default QuizContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}