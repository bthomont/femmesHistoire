{"ast":null,"code":"import React,{useState,useEffect}from'react';import QuestionCardGold from'./QuestionCardGold';import ScoreDisplay from'./ScoreDisplay';import questionsData from'./json/quiz.json';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const QuizContainerGold=()=>{const[questions,setQuestions]=useState([]);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[score,setScore]=useState(0);const[quizFinished,setQuizFinished]=useState(false);useEffect(()=>{const shuffledQuestions=questionsData.sort(()=>0.5-Math.random()).slice(0,20);setQuestions(shuffledQuestions.map(question=>({...question,image:question.image===\"images/default.jpg\"?\"images/defaultGold.jpg\":question.image})));setCurrentQuestionIndex(0);setScore(0);},[]);const handleAnswer=answer=>{if(questions[currentQuestionIndex].correct===answer){setScore(score+1);}const nextQuestionIndex=currentQuestionIndex+1;if(nextQuestionIndex<questions.length){setCurrentQuestionIndex(nextQuestionIndex);}else{setQuizFinished(true);}};return/*#__PURE__*/_jsx(\"div\",{children:!quizFinished?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(QuestionCardGold,{question:questions[currentQuestionIndex],onAnswerSelected:handleAnswer,niveau:questions[currentQuestionIndex]?questions[currentQuestionIndex].niveau:\"\",currentQuestionIndex:currentQuestionIndex+1,totalQuestions:questions.length})}):/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(ScoreDisplay,{score:score,totalQuestions:questions.length})})});};export default QuizContainerGold;","map":{"version":3,"names":["React","useState","useEffect","QuestionCardGold","ScoreDisplay","questionsData","jsx","_jsx","Fragment","_Fragment","QuizContainerGold","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","quizFinished","setQuizFinished","shuffledQuestions","sort","Math","random","slice","map","question","image","handleAnswer","answer","correct","nextQuestionIndex","length","children","onAnswerSelected","niveau","totalQuestions"],"sources":["C:/Users/Billy/Desktop/Quiz2024/femmesdhistoire2024/src/components/QuizContainerGold.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport QuestionCardGold from './QuestionCardGold';\r\nimport ScoreDisplay from './ScoreDisplay';\r\nimport questionsData from './json/quiz.json';\r\n\r\nconst QuizContainerGold = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [quizFinished, setQuizFinished] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const shuffledQuestions = questionsData.sort(() => 0.5 - Math.random()).slice(0, 20);\r\n        setQuestions(shuffledQuestions.map(question => ({\r\n            ...question,\r\n            image: question.image === \"images/default.jpg\" ? \"images/defaultGold.jpg\" : question.image\r\n        })));\r\n        setCurrentQuestionIndex(0);\r\n        setScore(0);\r\n    }, []);\r\n\r\n    const handleAnswer = (answer) => {\r\n        if (questions[currentQuestionIndex].correct === answer) {\r\n            setScore(score + 1);\r\n        }\r\n        const nextQuestionIndex = currentQuestionIndex + 1;\r\n        if (nextQuestionIndex < questions.length) {\r\n            setCurrentQuestionIndex(nextQuestionIndex);\r\n        } else {\r\n            setQuizFinished(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!quizFinished ? (\r\n                <>\r\n                    <QuestionCardGold\r\n                        question={questions[currentQuestionIndex]}\r\n                        onAnswerSelected={handleAnswer}\r\n                        niveau={questions[currentQuestionIndex] ? questions[currentQuestionIndex].niveau : \"\"}\r\n                        currentQuestionIndex={currentQuestionIndex + 1}\r\n                        totalQuestions={questions.length}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <ScoreDisplay score={score} totalQuestions={questions.length} />\r\n                </>\r\n\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizContainerGold;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CACjD,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,aAAa,KAAM,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAE7C,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACY,oBAAoB,CAAEC,uBAAuB,CAAC,CAAGb,QAAQ,CAAC,CAAC,CAAC,CACnE,KAAM,CAACc,KAAK,CAAEC,QAAQ,CAAC,CAAGf,QAAQ,CAAC,CAAC,CAAC,CACrC,KAAM,CAACgB,YAAY,CAAEC,eAAe,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CAEvDC,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAiB,iBAAiB,CAAGd,aAAa,CAACe,IAAI,CAAC,IAAM,GAAG,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CACpFX,YAAY,CAACO,iBAAiB,CAACK,GAAG,CAACC,QAAQ,GAAK,CAC5C,GAAGA,QAAQ,CACXC,KAAK,CAAED,QAAQ,CAACC,KAAK,GAAK,oBAAoB,CAAG,wBAAwB,CAAGD,QAAQ,CAACC,KACzF,CAAC,CAAC,CAAC,CAAC,CACJZ,uBAAuB,CAAC,CAAC,CAAC,CAC1BE,QAAQ,CAAC,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAW,YAAY,CAAIC,MAAM,EAAK,CAC7B,GAAIjB,SAAS,CAACE,oBAAoB,CAAC,CAACgB,OAAO,GAAKD,MAAM,CAAE,CACpDZ,QAAQ,CAACD,KAAK,CAAG,CAAC,CAAC,CACvB,CACA,KAAM,CAAAe,iBAAiB,CAAGjB,oBAAoB,CAAG,CAAC,CAClD,GAAIiB,iBAAiB,CAAGnB,SAAS,CAACoB,MAAM,CAAE,CACtCjB,uBAAuB,CAACgB,iBAAiB,CAAC,CAC9C,CAAC,IAAM,CACHZ,eAAe,CAAC,IAAI,CAAC,CACzB,CACJ,CAAC,CAED,mBACIX,IAAA,QAAAyB,QAAA,CACK,CAACf,YAAY,cACVV,IAAA,CAAAE,SAAA,EAAAuB,QAAA,cACIzB,IAAA,CAACJ,gBAAgB,EACbsB,QAAQ,CAAEd,SAAS,CAACE,oBAAoB,CAAE,CAC1CoB,gBAAgB,CAAEN,YAAa,CAC/BO,MAAM,CAAEvB,SAAS,CAACE,oBAAoB,CAAC,CAAGF,SAAS,CAACE,oBAAoB,CAAC,CAACqB,MAAM,CAAG,EAAG,CACtFrB,oBAAoB,CAAEA,oBAAoB,CAAG,CAAE,CAC/CsB,cAAc,CAAExB,SAAS,CAACoB,MAAO,CACpC,CAAC,CACJ,CAAC,cAEHxB,IAAA,CAAAE,SAAA,EAAAuB,QAAA,cACIzB,IAAA,CAACH,YAAY,EAACW,KAAK,CAAEA,KAAM,CAACoB,cAAc,CAAExB,SAAS,CAACoB,MAAO,CAAE,CAAC,CAClE,CAEL,CACA,CAAC,CAEd,CAAC,CAED,cAAe,CAAArB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}